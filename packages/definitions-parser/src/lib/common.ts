import { ensureDir, readJson } from "fs-extra";
import { writeJson, joinPaths } from "@definitelytyped/utils";
import { dataDirPath } from "./settings";

/** Settings that may be determined dynamically. */
export interface ParseDefinitionsOptions {
  /**
   * e.g. '../DefinitelyTyped'
   * This is overridden to `cwd` when running the tester, as that is run from within DefinitelyTyped.
   * If undefined, downloads instead.
   */
  readonly definitelyTypedPath: string | undefined;
  /** Whether to show progress bars. Good when running locally, bad when running in CI. */
  readonly progress: boolean;
  /** Disabled in CI since it has problems logging errors from other processes. */
  readonly parseInParallel: boolean;
}

/** Options for running locally. */
export const defaultLocalOptions: ParseDefinitionsOptions = { definitelyTypedPath: "../DefinitelyTyped", progress: true, parseInParallel: true };
export const defaultCIOptions: ParseDefinitionsOptions = { definitelyTypedPath: undefined, progress: false, parseInParallel: false };

export function readDataFile(generatedBy: string, fileName: string): Promise<object> {
  return readFileAndWarn(generatedBy, dataFilePath(fileName));
}

/** If a file doesn't exist, warn and tell the step it should have been generated by. */
export async function readFileAndWarn(generatedBy: string, filePath: string): Promise<object> {
  try {
      return await readJson(filePath);
  } catch (e) {
      console.error(`Run ${generatedBy} first!`);
      throw e;
  }
}

export async function writeDataFile(filename: string, content: {}, formatted = true): Promise<void> {
  await ensureDir(dataDirPath);
  await writeJson(dataFilePath(filename), content, formatted);
}

export function dataFilePath(filename: string): string {
  return joinPaths(dataDirPath, filename);
}
